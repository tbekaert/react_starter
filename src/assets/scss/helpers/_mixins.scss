//
//  M I X I N S
//
//  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@mixin selector($selector, $mq){
  $new-sel: str-insert($selector, $mq + "-", 2);
  $sel: "";
  @if($mq == "sm"){ $sel: "#{$selector}, #{$new-sel}"; }
  @else{ $sel: "#{$new-sel}"; }
  #{$sel}{ @content; }
};

@mixin inMedia($mq){
  @if($mq){
    @media #{$mq}{ @content; }
  }
  @else{
    @content;
  }
}

@function reverse($list, $recursive: false) {
  $result: ();

  @for $i from length($list)*-1 through -1 {
    @if type-of(nth($list, abs($i))) == list and $recursive {
      $result: append($result, reverse(nth($list, abs($i)), $recursive));
    }

    @else {
      $result: append($result, nth($list, abs($i)));
    }
  }

  @return $result;
}

@function strip-units($n) {
  @return $n / ($n * 0 + 1);
}

@function round-dec($n){
  @return ceil($n * 100) / 100;
}

//  Letter spacing
//  ───────────────────────────────────

@function letter-spacing($ls, $fz){
  @if(unit($fz) == "rem"){ $fz: $fz * 10; }
  @return strip-units($ls) * strip-units($fz) / 1000 * 1px;
}

//  Linear gradient
//  ───────────────────────────────────

@function getEasingValue($e, $s){
  // Quad
  @if($e == "easeInQuad"){ @return $s * $s; }
  @else if($e == "easeOutQuad"){ @return $s * (2 - $s); }
  @else if($e == "easeInOutQuad"){
    @if ($s < .5) { @return 2 * $s * $s; }
    @else{ @return -1 + (4 - 2 * $s) * $s; }
  }
  // Cubic
  @else if($e == "easeInCubic"){ @return $s * $s * $s; }
  @else if($e == "easeOutCubic"){ @return ($s - 1) * $s * $s + 1; }
  @else if($e == "easeInOutCubic"){
    @if ($s < .5) { @return 4 * $s * $s * $s; }
    @else{ @return ($s - 1) * (2 * $s - 2) * (2 * $s - 2) + 1; }
  }
  // Quart
  @else if($e == "easeInQuart"){ @return $s * $s * $s * $s; }
  @else if($e == "easeOutQuart"){ @return 1 - ($s - 1) * $s * $s * $s; }
  @else if($e == "easeInOutQuart"){
    @if ($s < .5) { @return 8 * $s * $s * $s * $s; }
    @else{ @return 1 - 8 * ($s - 1) *  $s * $s * $s; }
  }
  // Quint
  @else if($e == "easeInQuint"){ @return $s * $s * $s * $s * $s; }
  @else if($e == "easeOutQuint"){ @return 1 + ($s - 1) * $s * $s * $s * $s; }
  @else if($e == "easeInOutQuint"){
    @if ($s < .5) { @return 16 * $s * $s * $s * $s * $s; }
    @else{ @return 1 + 16 * ($s - 1) * $s * $s * $s * $s; }
  }
  // Linear
  @else{ @return $s; }
}

@function easing-linear-gradient($direction: to right, $color: #000, $alpha: 1, $easing: "linear", $steps: 10){
  $r: ();
  $gd: ();

  $r: append($r, $direction);

  @if($easing == "scrim"){
    $v: rgba($color, 0) 0%, rgba($color, $alpha*0.002) 1.8%, rgba($color, $alpha*0.008) 4.8%, rgba($color, $alpha*0.021) 9%, rgba($color, $alpha*0.042) 13.9%, rgba($color, $alpha*0.075) 19.8%, rgba($color, $alpha*0.126) 27%, rgba($color, $alpha*0.194) 35%, rgba($color, $alpha*0.278) 43.5%, rgba($color, $alpha*0.382) 53%, rgba($color, $alpha*0.541) 66%, rgba($color, $alpha*0.738) 81%, rgba($color, $alpha*1) 100%;
    $r: append($r, $v);
  }
  @else{
    @for $s from 0 to $steps + 1{
      $cs: $s * (1 / $steps);
      $v: rgba($color, $alpha*getEasingValue($easing, $cs)) ($cs * 100%);
      $r: append($r, $v);
    }
  }

  $gd: join($gd, $r, comma);

  @return linear-gradient($gd);
}
